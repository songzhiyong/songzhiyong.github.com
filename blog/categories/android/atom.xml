<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Faith, Hope, Charity]]></title>
  <link href="http://1vn.wang/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://1vn.wang/"/>
  <updated>2021-10-28T17:38:19+08:00</updated>
  <id>http://1vn.wang/</id>
  <author>
    <name><![CDATA[Jerome Song]]></name>
    <email><![CDATA[songzhiyong1121@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resource Shrinking]]></title>
    <link href="http://1vn.wang/blog/2015/01/24/resource-shrinking/"/>
    <updated>2015-01-24T20:33:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/24/resource-shrinking</id>
    <content type="html"><![CDATA[<p><a href="http://tools.android.com/tech-docs/new-build-system/resource-shrinking">http://tools.android.com/tech-docs/new-build-system/resource-shrinking</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android--Hardware Acceleration]]></title>
    <link href="http://1vn.wang/blog/2014/12/26/android-hardware-acceleration/"/>
    <updated>2014-12-26T09:55:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/12/26/android-hardware-acceleration</id>
    <content type="html"><![CDATA[<p>Android中的硬件加速
本文的主要内容来自SDK文章的"Hardware Acceleration”.</p>

<p>从Android 3.0开始，Android的2D渲染管线可以更好的支持硬件加速。硬件加速使用GPU进行View上的绘制操作。</p>

<p>硬件加速可以在一下四个级别开启或关闭：</p>

<p>Application
Activity
Window
View
Application级别</p>

<p>往您的应用程序AndroidManifest.xml文件为application标签添加如下的属性即可为整个应用程序开启硬件加速：
<code>
&lt;application android:hardwareAccelerated="true" .../&gt;
</code>
Activity级别</p>

<p>您还可以控制每个activity是否开启硬件加速，只需在activity元素中添加android:hardwareAccelerated属性即可办到。比如下面的例子，在application级别开启硬件加速，但在某个activity上关闭硬件加速。
<code>
&lt;application android:hardwareAccelerated="true"&gt;
    &lt;activity ... /&gt;
    &lt;activity android:hardwareAccelerated="false" /&gt;
&lt;/application&gt;
</code>
Window级别</p>

<p>如果您需要更小粒度的控制，可以使用如下代码开启某个window的硬件加速：
<code>java
getWindow().setFlags(
    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
</code>
注：目前还不能在window级别关闭硬件加速。</p>

<p>View级别</p>

<p>您可以在运行时用以下的代码关闭单个view的硬件加速：</p>

<p>myView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
注：您不能在view级别开启硬件加速</p>

<p>为什么需要这么多级别的控制？</p>

<p>很明显，硬件加速能够带来性能提升，android为什么要弄出这么多级别的控制，而不是默认就是全部硬件加速呢？原因是并非所有的2D绘图操作支持硬件加速，如果您的程序中使用了自定义视图或者绘图调用，程序可能会工作不正常。如果您的程序中只是用了标准的视图和Drawable，放心大胆的开启硬件加速吧！具体是哪些绘图操作不支持硬件加速呢?以下是已知不支持硬件加速的绘图操作：</p>

<p>Canvas
clipPath()
clipRegion()
drawPicture()
drawPosText()
drawTextOnPath()
drawVertices()
Paint
setLinearText()
setMaskFilter()
setRasterizer()
另外还有一些绘图操作，开启和不开启硬件加速，效果不一样：</p>

<p>Canvas
clipRect()： XOR, Difference和ReverseDifference裁剪模式被忽略，3D变换将不会应用在裁剪的矩形上。
drawBitmapMesh()：colors数组被忽略
drawLines()：反锯齿不支持
setDrawFilter()：可以设置，但无效果
Paint
setDither()： 忽略
setFilterBitmap()：过滤永远开启
setShadowLayer()：只能用在文本上
ComposeShader
ComposeShader只能包含不同类型的shader (比如一个BitmapShader和一个LinearGradient，但不能是两个BitmapShader实例)
ComposeShader不能包含ComposeShader
如果应用程序受到这些影响，您可以在受影响的部分调用setLayerType(View.LAYER_TYPE_SOFTWARE, null)，这样在其它地方仍然可以享受硬件加速带来的好处</p>

<p>Android的绘制模型</p>

<p>开启硬件加速后，Android框架将采用新的绘制模型。基于软件的绘制模型和基于硬件的绘制模型有和不同呢？</p>

<p>基于软件的绘制模型</p>

<p>在软件绘制模型下，视图按照如下两个步骤绘制：</p>

<ol>
<li><p>Invalidate the hierarchy（注：hierarchy怎么翻译？）</p></li>
<li><p>Draw the hierarchy</p></li>
</ol>


<p>应用程序调用invalidate()更新UI的某一部分，失效(invalidation)消息将会在整个视图层中传递，计算每个需要重绘的区域（即脏区域）。然后Android系统将会重绘所有和脏区域有交集的view。很明显，这种绘图模式存在缺点：</p>

<ol>
<li><p>每个绘制操作中会执行不必要的代码。比如如果应用程序调用invalidate()重绘button，而button又位于另一个view之上，即使该view没有变化，也会进行重绘。</p></li>
<li><p>可能会掩盖一些应用程序的bug。因为android系统会重绘与脏区域有交集的view，所以view的内容可能会在没有调用invalidate()的情况下重绘。这可能会导致一个view依赖于其它view的失效才得到正确的行为。</p></li>
</ol>


<p>基于硬件的绘制模型</p>

<p>Android系统仍然使用invalidate()和draw()来绘制view，但在处理绘制上有所不同。Android系统记录绘制命令到显示列表，而不是立即执行绘制命令。另一个优化就是Android系统只需记录和更新标记为脏（通过invalidate()）的view。新的绘制模型包含三个步骤：</p>

<ol>
<li><p>Invalidate the hierarchy</p></li>
<li><p>记录和更新显示列表</p></li>
<li><p>绘制显示列表</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run lint in Android Studio]]></title>
    <link href="http://1vn.wang/blog/2014/09/19/run-lint-in-android-studio/"/>
    <updated>2014-09-19T10:52:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/09/19/run-lint-in-android-studio</id>
    <content type="html"><![CDATA[<p>Run lint in Android Studio</p>

<p>As I have just started learning Android developement, I was happy to see lint as such an integral part of the development process.</p>

<p>To runt lint and analyze your project, simply select <code>Analyze &gt; Inspect Code</code>.</p>

<p>In the popup window that appears, you can select the analysis scope, like which projects to analyze and which to skip. For my test project, I just chose to analyze everything and ended up with this nice summary:
<br/><br/>
<img src="/images/2014/09/inspect_code.png" title="inspect code" alt="" /><br/><br/></p>

<p>When you browse through the reported items, you will notice that many of them can just be ignored. For instance, spelling, which catches a lot of non-typos in strings. For instance, the project name, is reported as a typo. It also complains about invalid XML in generated files.</p>

<p>However, stuff like the items under Android lint and Declaration redundancy are highly interesting, and will be a great help for a newbie like me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android.intent.action.ASSIST]]></title>
    <link href="http://1vn.wang/blog/2014/08/21/android-dot-intent-dot-action-dot-assist/"/>
    <updated>2014-08-21T17:28:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/08/21/android-dot-intent-dot-action-dot-assist</id>
    <content type="html"><![CDATA[<h3>public static final String ACTION_ASSIST</h3>

<h4>Added in API level 16</h4>

<p>Activity Action: Perform assist action.</p>

<p>Input: EXTRA_ASSIST_PACKAGE, EXTRA_ASSIST_CONTEXT, can provide additional optional contextual information about where the user was when they requested the assist. Output: nothing.</p>

<p>Constant Value: &ldquo;android.intent.action.ASSIST&rdquo;</p>

<h3>Register:</h3>

<pre><code class="xml">&lt;intent-filter&gt;
    &lt;action android:name="android.intent.action.ASSIST" /&gt;

    &lt;category android:name="android.intent.category.DEFAULT" &gt;
    &lt;/category&gt;
&lt;/intent-filter&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RemoteViews.apply]]></title>
    <link href="http://1vn.wang/blog/2014/08/18/remoteviews-dot-apply/"/>
    <updated>2014-08-18T21:17:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/08/18/remoteviews-dot-apply</id>
    <content type="html"><![CDATA[<h3>RemoteViews.apply</h3>

<p>View  apply(Context context, ViewGroup parent)</p>

<p>Inflates the view hierarchy represented by this object and applies all of the actions.</p>

<h3>USAGE:</h3>

<pre><code class="java">...bla bla bla

Notification notification = sbn.getNotification();
RemoteViews remoteViews = notification.contentView;
View notiView = previewRemote.apply(context, null);
...blablabla
</code></pre>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Faith, Hope, Charity]]></title>
  <link href="http://1vn.wang/atom.xml" rel="self"/>
  <link href="http://1vn.wang/"/>
  <updated>2021-10-28T17:37:40+08:00</updated>
  <id>http://1vn.wang/</id>
  <author>
    <name><![CDATA[Jerome Song]]></name>
    <email><![CDATA[songzhiyong1121@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn OpenTag]]></title>
    <link href="http://1vn.wang/blog/2021/10/28/learn-opentag/"/>
    <updated>2021-10-28T14:36:00+08:00</updated>
    <id>http://1vn.wang/blog/2021/10/28/learn-opentag</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githug秘籍]]></title>
    <link href="http://1vn.wang/blog/2016/01/06/githug/"/>
    <updated>2016-01-06T11:31:00+08:00</updated>
    <id>http://1vn.wang/blog/2016/01/06/githug</id>
    <content type="html"><![CDATA[<ol>
<li>init</li>
<li>config</li>
<li>add</li>
<li>commit</li>
<li>clone</li>
<li>clone_to_folder</li>
<li>ignore</li>
<li>include</li>
<li>status</li>
<li>number_of_files_committed</li>
<li>rm</li>
<li>rm_cached</li>
<li>stash</li>
<li>rename</li>
<li>restructure</li>
<li>log</li>
<li>tag</li>
<li>push_tags</li>
<li>commit_amend</li>
<li>commit_in_future</li>
<li>reset</li>
<li>reset_soft</li>
<li>checkout_file</li>
<li>remote</li>
<li>remote_url</li>
<li>pull</li>
<li>remote_add</li>
<li>push</li>
<li>diff</li>
<li>blame</li>
<li>branch</li>
<li>checkout</li>
<li>checkout_tag</li>
<li>checkout_tag_over_branch</li>
<li>branch_at</li>
<li>delete_branch</li>
<li>push_branch</li>
<li>merge</li>
<li>fetch</li>
<li>rebase</li>
<li>repack</li>
<li>cherry-pick</li>
<li>grep</li>
<li>rename_commit</li>
<li>squash</li>
<li>merge_squash</li>
<li>reorder</li>
<li>bisect</li>
<li>stage_lines</li>
<li>find_old_branch</li>
<li>revert</li>
<li>restore</li>
<li>conflict</li>
<li>submodule</li>
<li>contribute</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resource Shrinking]]></title>
    <link href="http://1vn.wang/blog/2015/01/24/resource-shrinking/"/>
    <updated>2015-01-24T20:33:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/24/resource-shrinking</id>
    <content type="html"><![CDATA[<p><a href="http://tools.android.com/tech-docs/new-build-system/resource-shrinking">http://tools.android.com/tech-docs/new-build-system/resource-shrinking</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best practices for API versioning]]></title>
    <link href="http://1vn.wang/blog/2015/01/22/best-practices-for-api-versioning/"/>
    <updated>2015-01-22T19:53:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/22/best-practices-for-api-versioning</id>
    <content type="html"><![CDATA[<p>This is a good and a tricky question. The topic of URI design is at the same time the most prominent part of a REST API and, therefore, a potentially long-term commitment towards the users of that API.</p>

<p>Since evolution of an application and, to a lesser extent, its API is a fact of life and that it&rsquo;s even similar to the evolution of a seemingly complex product like a programming language, the URI design should have less natural constraints and it should be preserved over time. The longer the application&rsquo;s and API&rsquo;s lifespan, the greater the commitment to the users of the application and API.</p>

<p>On the other hand, another fact of life is that it is hard to foresee all the resources and their aspects that would be consumed through the API. Luckily, it is not necessary to design the entire API which will be used until <a href="http://en.wikipedia.org/wiki/Apocalypse">Apocalypse</a>. It is sufficient to correctly define all the resource end-points and the addressing scheme of every resource and resource instance.</p>

<p>Over time you may need to add new resources and new attributes to each particular resource, but the method that API users follow to access a particular resources should not change once a resource addressing scheme becomes public and therefore final.</p>

<p>This method applies to HTTP verb semantics (e.g. PUT should always update/replace) and HTTP status codes that are supported in earlier API versions (they should continue to work so that API clients that have worked without human intervention should be able to continue to work like that).</p>

<p>Furthermore, since embedding of API version into the URI would disrupt the concept of <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5">hypermedia as the engine of application state</a> (stated in Roy T. Fieldings PhD dissertation) by having a resource address/URI that would change over time, I would conclude that API versions should not be kept in resource URIs for a long time meaning that <font color="green">resource URIs that API users can depend on should be permalinks</font>.</p>

<p>Sure, it is possible to embed API version in base URI but only for reasonable and restricted uses like debugging a API client that works with the the new API version. Such versioned APIs should be time-limited and available to limited groups of API users (like during closed betas) only. Otherwise, you commit yourself where you shouldn&rsquo;t.</p>

<p>A couple of thoughts regarding maintenance of API versions that have expiration date on them. All programming platforms/languages commonly used to implement web services (Java, .NET, PHP, Perl, Rails, etc.) allow easy binding of web service end-point(s) to a base URI. This way it&rsquo;s easy to gather and keep a collection of files/classes/methods separate across different API versions.</p>

<p>From the API users POV, it&rsquo;s also easier to work with and bind to a particular API version when it&rsquo;s this obvious but only for limited time, i.e. during development.</p>

<p>From the API maintainer&rsquo;s POV, it&rsquo;s easier to maintain different API versions in parallel by using source control systems that predominantly work on files as the smallest unit of (source code) versioning.</p>

<p>However, with API versions clearly visible in URI there&rsquo;s a caveat: one might also object this approach since <font color="red">API history becomes visible/aparent in the URI design</font> and therefore is prone to changes over time which goes against the guidelines of REST. I agree!</p>

<p>The way to go around this reasonable objection, is to implement the latest API version under versionless API base URI. In this case, API client developers can choose to either:</p>

<ul>
<li><p>develop against the latest one (committing themselves to maintain the application protecting it from eventual API changes that might break their badly designed API client).</p></li>
<li><p>bind to a specific version of the API (which becomes apparent) but only for a limited time</p></li>
</ul>


<p>For example, if API v3.0 is the latest API version, the following two should be aliases (i.e. behave identically to all API requests):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://shonzilla/api/customers/1234
</span><span class='line'>http://shonzilla/api/v3.0/customers/1234
</span><span class='line'>http://shonzilla/api/v3/customers/1234</span></code></pre></td></tr></table></div></figure>


<p>In addition, API clients that still try to point to the <em>old</em> API should be informed to use the latest previous API version, if the API version they&rsquo;re using is obsolete or not supported anymore. So accessing any of the obsolete URIs like these:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://shonzilla/api/v2.2/customers/1234
</span><span class='line'>http://shonzilla/api/v2.0/customers/1234
</span><span class='line'>http://shonzilla/api/v2/customers/1234
</span><span class='line'>http://shonzilla/api/v1.1/customers/1234
</span><span class='line'>http://shonzilla/api/v1/customers/1234</span></code></pre></td></tr></table></div></figure>


<p>should return any of the 30x HTTP status codes that indicate redirection that are used in conjunction with <code>Location</code> HTTP header that redirects to the appropriate version of resource URI which remain to be this one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://shonzilla/api/customers/1234</span></code></pre></td></tr></table></div></figure>


<p>There are at least two redirection HTTP status codes that are appropriate for API versioning scenarios:</p>

<ul>
<li><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2">301 Moved permanently</a> indicating that the resource with a requested URI is moved permanently to another URI (which should be a resource instance permalink that does not contain API version info). This status code can be used to indicate an obsolete/unsupported API version, informing API client that a versioned resource URI been replaced by a resource permalink.</p></li>
<li><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3">302 Found</a> indicating that the requested resource temporarily is located at another location, while requested URI may still supported. This status code may be useful when the version-less URIs are temporarily unavailable and that a request should be repeated using the redirection address (e.g. pointing to the URI with APi version embedded) and we want to tell clients to keep using it (i.e. the permalinks).</p></li>
<li><p>other scenarios can be found in <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3">Redirection 3xx chapter of HTTP 1.1 specification</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Delete a remote Git tag]]></title>
    <link href="http://1vn.wang/blog/2015/01/20/how-to-delete-a-remote-git-tag/"/>
    <updated>2015-01-20T22:02:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/20/how-to-delete-a-remote-git-tag</id>
    <content type="html"><![CDATA[<p>You probably won&rsquo;t need to do this often (if ever at all) but just in case, here is how to delete a tag from a remote Git repository.</p>

<p>If you have a tag named &lsquo;demo&rsquo; then you would just do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git tag -d demo
</span><span class='line'>git push origin :refs/tags/demo
</span><span class='line'>That will remove 'demo' from the remote repository.</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CopyOnWriteArrayList]]></title>
    <link href="http://1vn.wang/blog/2015/01/17/copyonwritearraylist/"/>
    <updated>2015-01-17T22:05:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/17/copyonwritearraylist</id>
    <content type="html"><![CDATA[<p>A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.
This is ordinarily too costly, but may be more efficient than alternatives when traversal operations vastly outnumber mutations, and is useful when you cannot or don&rsquo;t want to synchronize traversals, yet need to preclude interference among concurrent threads. The &ldquo;snapshot&rdquo; style iterator method uses a reference to the state of the array at the point that the iterator was created. This array never changes during the lifetime of the iterator, so interference is impossible and the iterator is guaranteed not to throw ConcurrentModificationException. The iterator will not reflect additions, removals, or changes to the list since the iterator was created. Element-changing operations on iterators themselves (remove, set, and add) are not supported. These methods throw UnsupportedOperationException.</p>

<p>All elements are permitted, including null.</p>

<p>Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a CopyOnWriteArrayList happen-before actions subsequent to the access or removal of that element from the CopyOnWriteArrayList in another thread.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite Notes]]></title>
    <link href="http://1vn.wang/blog/2015/01/12/sqlite-notes/"/>
    <updated>2015-01-12T14:43:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/12/sqlite-notes</id>
    <content type="html"><![CDATA[<p>The Offsets Function of fts</p>

<p>Integer Interpretation</p>

<p>0 The column number that the term instance occurs in (0 for the leftmost column of the FTS table, 1 for the next leftmost, etc.).
1 The term number of the matching term within the full-text query expression. Terms within a query expression are numbered starting from 0 in the order that they occur.
2 The byte offset of the matching term within the column.
3 The size of the matching term in bytes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio Live Templates]]></title>
    <link href="http://1vn.wang/blog/2015/01/09/android-studio-live-templates/"/>
    <updated>2015-01-09T21:29:00+08:00</updated>
    <id>http://1vn.wang/blog/2015/01/09/android-studio-live-templates</id>
    <content type="html"><![CDATA[<p><strong>Type the abbrs then click <code>TAB</code>, template codes will be generated automatically.</strong></p>

<h3>iterations</h3>

<ul>
<li><code>fori</code> Create iteration loop</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">$INDEX$</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">$INDEX$</span> <span class="o">&lt;</span> <span class="n">$LIMIT$</span><span class="p">;</span> <span class="n">$INDEX$</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>itar</code> Iterate elements of array</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">$INDEX$</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">$INDEX$</span> <span class="o">&lt;</span> <span class="n">$ARRAY$</span><span class="p">.</span><span class="na">length</span><span class="p">;</span> <span class="n">$INDEX$</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$ELEMENT_TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$ARRAY$</span><span class="o">[</span><span class="n">$INDEX$</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>itco</code> Iterate elements of java.util.Collection</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span><span class="p">(</span><span class="n">$ITER_TYPE$</span> <span class="n">$ITER$</span> <span class="o">=</span> <span class="n">$COLLECTION$</span><span class="p">.</span><span class="na">iterator</span><span class="p">();</span> <span class="n">$ITER$</span><span class="p">.</span><span class="na">hasNext</span><span class="p">();</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$ELEMENT_TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span><span class="n">$CAST$</span> <span class="n">$ITER$</span><span class="p">.</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>iten</code> Iterate java.util.Enumeration</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">while</span><span class="p">(</span><span class="n">$ENUM$</span><span class="p">.</span><span class="na">hasMoreElements</span><span class="p">()){</span>
</span><span class='line'>  <span class="n">$TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$CAST$</span> <span class="n">$ENUM$</span><span class="p">.</span><span class="na">nextElement</span><span class="p">();</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>iter</code> Iterate Iterable | Array in J2SDK 5.0 syntax</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span> <span class="p">(</span><span class="n">$ELEMENT_TYPE$</span> <span class="n">$VAR$</span> <span class="p">:</span> <span class="n">$ITERABLE_TYPE$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>itit</code> Iterate java.util.Iterator</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">while</span><span class="p">(</span><span class="n">$ITER$</span><span class="p">.</span><span class="na">hasNext</span><span class="p">()){</span>
</span><span class='line'>  <span class="n">$TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$CAST$</span> <span class="n">$ITER$</span><span class="p">.</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>itli</code> Iterate elements of java.util.List</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">$INDEX$</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">$INDEX$</span> <span class="o">&lt;</span> <span class="n">$LIST$</span><span class="p">.</span><span class="na">size</span><span class="p">();</span> <span class="n">$INDEX$</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$ELEMENT_TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$CAST$</span> <span class="n">$LIST$</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">$INDEX$</span><span class="p">);</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ittok</code> Iterate tokens from String</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span> <span class="p">(</span><span class="n">java</span><span class="p">.</span><span class="na">util</span><span class="p">.</span><span class="na">StringTokenizer</span> <span class="n">$TOKENIZER$</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="p">.</span><span class="na">util</span><span class="p">.</span><span class="na">StringTokenizer</span><span class="p">(</span><span class="n">$STRING$</span><span class="p">);</span> <span class="n">$TOKENIZER$</span><span class="p">.</span><span class="na">hasMoreTokens</span><span class="p">();</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$TOKENIZER_COPY$</span><span class="p">.</span><span class="na">nextToken</span><span class="p">();</span>
</span><span class='line'>    <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>itve</code> Iterate elements of java.util.Vector</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">$INDEX$</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">$INDEX$</span> <span class="o">&lt;</span> <span class="n">$VECTOR$</span><span class="p">.</span><span class="na">size</span><span class="p">();</span> <span class="n">$INDEX$</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$ELEMENT_TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$CAST$</span> <span class="n">$VECTOR$</span><span class="p">.</span><span class="na">elementAt</span><span class="p">(</span><span class="n">$INDEX$</span><span class="p">);</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ritar</code> Iterate elements of array in reverse order</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">$INDEX$</span> <span class="o">=</span> <span class="n">$ARRAY$</span><span class="p">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">$INDEX$</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">$INDEX$</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">$ELEMENT_TYPE$</span> <span class="n">$VAR$</span> <span class="o">=</span> <span class="n">$ARRAY$</span><span class="o">[</span><span class="n">$INDEX$</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>  <span class="n">$END$</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>other</h3>

<ul>
<li>geti</li>
<li>ifn</li>
<li>inn</li>
<li>inst</li>
<li>lazy</li>
<li>lst</li>
<li>mn</li>
<li>mx</li>
<li>psvm</li>
<li>toar

<h3>output</h3></li>
<li>serr</li>
<li>souf</li>
<li>sout</li>
<li>soutm</li>
<li>soutp</li>
<li>soutv

<h3>plain</h3></li>
<li>psf</li>
<li>psfi</li>
<li>psfs</li>
<li>St</li>
<li>thr</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android--Hardware Acceleration]]></title>
    <link href="http://1vn.wang/blog/2014/12/26/android-hardware-acceleration/"/>
    <updated>2014-12-26T09:55:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/12/26/android-hardware-acceleration</id>
    <content type="html"><![CDATA[<p>Android 中的硬件加速
本文的主要内容来自 SDK 文章的&#8221;Hardware Acceleration”.</p>

<p>从 Android 3.0 开始，Android 的 2D 渲染管线可以更好的支持硬件加速。硬件加速使用 GPU 进行 View 上的绘制操作。</p>

<p>硬件加速可以在一下四个级别开启或关闭：</p>

<p>Application
Activity
Window
View
Application 级别</p>

<p>往您的应用程序 AndroidManifest.xml 文件为 application 标签添加如下的属性即可为整个应用程序开启硬件加速：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;application android:hardwareAccelerated="true" .../&gt;</span></code></pre></td></tr></table></div></figure>


<p>Activity 级别</p>

<p>您还可以控制每个 activity 是否开启硬件加速，只需在 activity 元素中添加 android:hardwareAccelerated 属性即可办到。比如下面的例子，在 application 级别开启硬件加速，但在某个 activity 上关闭硬件加速。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;application android:hardwareAccelerated="true"&gt;
</span><span class='line'>    &lt;activity ... /&gt;
</span><span class='line'>    &lt;activity android:hardwareAccelerated="false" /&gt;
</span><span class='line'>&lt;/application&gt;</span></code></pre></td></tr></table></div></figure>


<p>Window 级别</p>

<p>如果您需要更小粒度的控制，可以使用如下代码开启某个 window 的硬件加速：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">getWindow</span><span class="p">().</span><span class="na">setFlags</span><span class="p">(</span>
</span><span class='line'>    <span class="n">WindowManager</span><span class="p">.</span><span class="na">LayoutParams</span><span class="p">.</span><span class="na">FLAG_HARDWARE_ACCELERATED</span><span class="p">,</span>
</span><span class='line'>    <span class="n">WindowManager</span><span class="p">.</span><span class="na">LayoutParams</span><span class="p">.</span><span class="na">FLAG_HARDWARE_ACCELERATED</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注：目前还不能在 window 级别关闭硬件加速。</p>

<p>View 级别</p>

<p>您可以在运行时用以下的代码关闭单个 view 的硬件加速：</p>

<p>myView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
注：您不能在 view 级别开启硬件加速</p>

<p>为什么需要这么多级别的控制？</p>

<p>很明显，硬件加速能够带来性能提升，android 为什么要弄出这么多级别的控制，而不是默认就是全部硬件加速呢？原因是并非所有的 2D 绘图操作支持硬件加速，如果您的程序中使用了自定义视图或者绘图调用，程序可能会工作不正常。如果您的程序中只是用了标准的视图和 Drawable，放心大胆的开启硬件加速吧！具体是哪些绘图操作不支持硬件加速呢?以下是已知不支持硬件加速的绘图操作：</p>

<p>Canvas
clipPath()
clipRegion()
drawPicture()
drawPosText()
drawTextOnPath()
drawVertices()
Paint
setLinearText()
setMaskFilter()
setRasterizer()
另外还有一些绘图操作，开启和不开启硬件加速，效果不一样：</p>

<p>Canvas
clipRect()： XOR, Difference 和 ReverseDifference 裁剪模式被忽略，3D 变换将不会应用在裁剪的矩形上。
drawBitmapMesh()：colors 数组被忽略
drawLines()：反锯齿不支持
setDrawFilter()：可以设置，但无效果
Paint
setDither()： 忽略
setFilterBitmap()：过滤永远开启
setShadowLayer()：只能用在文本上
ComposeShader
ComposeShader 只能包含不同类型的 shader (比如一个 BitmapShader 和一个 LinearGradient，但不能是两个 BitmapShader 实例)
ComposeShader 不能包含 ComposeShader
如果应用程序受到这些影响，您可以在受影响的部分调用 setLayerType(View.LAYER_TYPE_SOFTWARE, null)，这样在其它地方仍然可以享受硬件加速带来的好处</p>

<p>Android 的绘制模型</p>

<p>开启硬件加速后，Android 框架将采用新的绘制模型。基于软件的绘制模型和基于硬件的绘制模型有和不同呢？</p>

<p>基于软件的绘制模型</p>

<p>在软件绘制模型下，视图按照如下两个步骤绘制：</p>

<ol>
<li><p>Invalidate the hierarchy（注：hierarchy 怎么翻译？）</p></li>
<li><p>Draw the hierarchy</p></li>
</ol>


<p>应用程序调用 invalidate()更新 UI 的某一部分，失效(invalidation)消息将会在整个视图层中传递，计算每个需要重绘的区域（即脏区域）。然后 Android 系统将会重绘所有和脏区域有交集的 view。很明显，这种绘图模式存在缺点：</p>

<ol>
<li><p>每个绘制操作中会执行不必要的代码。比如如果应用程序调用 invalidate()重绘 button，而 button 又位于另一个 view 之上，即使该 view 没有变化，也会进行重绘。</p></li>
<li><p>可能会掩盖一些应用程序的 bug。因为 android 系统会重绘与脏区域有交集的 view，所以 view 的内容可能会在没有调用 invalidate()的情况下重绘。这可能会导致一个 view 依赖于其它 view 的失效才得到正确的行为。</p></li>
</ol>


<p>基于硬件的绘制模型</p>

<p>Android 系统仍然使用 invalidate()和 draw()来绘制 view，但在处理绘制上有所不同。Android 系统记录绘制命令到显示列表，而不是立即执行绘制命令。另一个优化就是 Android 系统只需记录和更新标记为脏（通过 invalidate()）的 view。新的绘制模型包含三个步骤：</p>

<ol>
<li><p>Invalidate the hierarchy</p></li>
<li><p>记录和更新显示列表</p></li>
<li><p>绘制显示列表</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git log pretty]]></title>
    <link href="http://1vn.wang/blog/2014/12/06/git-log-pretty/"/>
    <updated>2014-12-06T19:40:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/12/06/git-log-pretty</id>
    <content type="html"><![CDATA[<ul>
<li>%H: commit hash</li>
<li>%h: 缩短的 commit hash</li>
<li>%T: tree hash</li>
<li>%t: 缩短的 tree hash</li>
<li>%P: parent hashes</li>
<li>%p: 缩短的 parent hashes</li>
<li>%an: 作者名字</li>
<li>%aN: mailmap 的作者名字 (.mailmap 对应，详情参照 git-shortlog(1)或者 git-blame(1))</li>
<li>%ae: 作者邮箱</li>
<li>%aE: 作者邮箱 (.mailmap 对应，详情参照 git-shortlog(1)或者 git-blame(1))</li>
<li>%ad: 日期 (&ndash;date= 制定的格式)</li>
<li>%aD: 日期, RFC2822 格式</li>
<li>%ar: 日期, 相对格式(1 day ago)</li>
<li>%at: 日期, UNIX timestamp</li>
<li>%ai: 日期, ISO 8601 格式</li>
<li>%cn: 提交者名字</li>
<li>%cN: 提交者名字 (.mailmap 对应，详情参照 git-shortlog(1)或者 git-blame(1))</li>
<li>%ce: 提交者 email</li>
<li>%cE: 提交者 email (.mailmap 对应，详情参照 git-shortlog(1)或者 git-blame(1))</li>
<li>%cd: 提交日期 (&ndash;date= 制定的格式)</li>
<li>%cD: 提交日期, RFC2822 格式</li>
<li>%cr: 提交日期, 相对格式(1 day ago)</li>
<li>%ct: 提交日期, UNIX timestamp</li>
<li>%ci: 提交日期, ISO 8601 格式</li>
<li>%d: ref 名称</li>
<li>%e: encoding</li>
<li>%s: commit 信息标题</li>
<li>%f: sanitized subject line, suitable for a filename</li>
<li>%b: commit 信息内容</li>
<li>%N: commit notes</li>
<li>%gD: reflog selector, e.g., refs/stash@{1}</li>
<li>%gd: shortened reflog selector, e.g., stash@{1}</li>
<li>%gs: reflog subject</li>
<li>%Cred: 切换到红色</li>
<li>%Cgreen: 切换到绿色</li>
<li>%Cblue: 切换到蓝色</li>
<li>%Creset: 重设颜色</li>
<li>%C(&hellip;): 制定颜色, as described in color.branch.* config option</li>
<li>%m: left, right or boundary mark</li>
<li>%n: 换行</li>
<li>%%: a raw %</li>
<li>%x00: print a byte from a hex code</li>
<li>%w([[,[,]]]): switch line wrapping, like the -w option of git-shortlog(1).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Tips]]></title>
    <link href="http://1vn.wang/blog/2014/09/23/vim-tips/"/>
    <updated>2014-09-23T11:53:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/09/23/vim-tips</id>
    <content type="html"><![CDATA[<p>1）删除文字</p>

<ul>
<li><p>「x」：每按一次，删除光标所在位置的“后面”一个字符。</p></li>
<li><p>「#x」：例如，「6x」表示删除光标所在位置的“后面”6 个字符。</p></li>
<li><p>「X」：大写的 X，每按一次，删除光标所在位置的“前面”一个字符。</p></li>
<li><p>「#X」：例如，「20X」表示删除光标所在位置的“前面”20 个字符。</p></li>
<li><p>「dd」：删除光标所在行。</p></li>
<li><p>「#dd」：从光标所在行开始删除#行</p></li>
<li><p>「dG」：全部删除</p></li>
</ul>


<p>2）复制</p>

<ul>
<li><p>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</p></li>
<li><p>「#yw」：复制#个字到缓冲区</p></li>
<li><p>「yy」：复制光标所在行到缓冲区。</p></li>
<li><p>「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6 行文字。</p></li>
<li><p>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</p></li>
</ul>


<p>3）替换</p>

<ul>
<li><p>「r」：替换光标所在处的字符。</p></li>
<li><p>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p></li>
</ul>


<p>4）回复上一次操作</p>

<ul>
<li>「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次“u”可以执行多次回复。 -</li>
</ul>


<p>5）跳至指定的行</p>

<ul>
<li><p>「ctrl」+「g」列出光标所在行的行号。</p></li>
<li><p>「#G」：例如，「15G」，表示移动光标至文章的第 15 行行首。</p></li>
</ul>


<hr />

<p>Last line mode 下命令简介</p>

<p>　　在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</p>

<p>A) 列出行号</p>

<ul>
<li>「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</li>
</ul>


<p>B) 跳到文件中的某一行</p>

<ul>
<li>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字 15，再回车，就会跳到文章的第 15 行。</li>
</ul>


<p>C) 查找字符</p>

<ul>
<li><p>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。</p></li>
<li><p>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</p></li>
</ul>


<p>D) 保存文件</p>

<ul>
<li>「w」：在冒号输入字母「w」就可以将文件保存起来。</li>
</ul>


<p>E) 离开 vi</p>

<ul>
<li><p>「q」：按「q」就是退出，如果无法离开 vi，可以在「q」后跟一个「!」强制离开 vi。</p></li>
<li><p>「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。
<br></p></li>
</ul>


<hr />

<ul>
<li>查看并编辑二进制文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%!xxd </span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>返回原文</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%!xxd -r  </span></code></pre></td></tr></table></div></figure>


<ul>
<li>ctrl+f        在文件中前移一页（相当于 page down）；</li>
<li>ctrl+b        在文件中后移一页（相当于 page up）；</li>
<li>*          当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；</li>
<li>#          当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；</li>
<li>( / )        移动到 前/后 句的开始；</li>
<li>{ / }        跳转到 当 前/下一个 段落的开始。</li>
<li>g_         到本行最后一个不是 blank 字符的位置。</li>
<li>fa         到下一个为 a 的字符处，你也可以 fs 到下一个为 s 的字符。</li>
<li>t,         到逗号前的第一个字符。逗号可以变成其它字符。</li>
<li>3fa        在当前行查找第三个出现的 a。</li>
<li>F/T        和 f 和 t 一样，只不过是相反方向;</li>
<li>gg         将光标定位到文件第一行起始位置；</li>
<li>G          将光标定位到文件最后一行起始位置；</li>
<li>NG 或 Ngg    将光标定位到第 N 行的起始位置。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run lint in Android Studio]]></title>
    <link href="http://1vn.wang/blog/2014/09/19/run-lint-in-android-studio/"/>
    <updated>2014-09-19T10:52:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/09/19/run-lint-in-android-studio</id>
    <content type="html"><![CDATA[<p>Run lint in Android Studio</p>

<p>As I have just started learning Android developement, I was happy to see lint as such an integral part of the development process.</p>

<p>To runt lint and analyze your project, simply select <code>Analyze &gt; Inspect Code</code>.</p>

<p>In the popup window that appears, you can select the analysis scope, like which projects to analyze and which to skip. For my test project, I just chose to analyze everything and ended up with this nice summary:
<br/><br/>
<img src="http://1vn.wang/images/2014/09/inspect_code.png" title="inspect code" alt="" /><br/><br/></p>

<p>When you browse through the reported items, you will notice that many of them can just be ignored. For instance, spelling, which catches a lot of non-typos in strings. For instance, the project name, is reported as a typo. It also complains about invalid XML in generated files.</p>

<p>However, stuff like the items under Android lint and Declaration redundancy are highly interesting, and will be a great help for a newbie like me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex in Sublime Text 2]]></title>
    <link href="http://1vn.wang/blog/2014/09/15/regex-in-sublime-text-2/"/>
    <updated>2014-09-15T12:11:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/09/15/regex-in-sublime-text-2</id>
    <content type="html"><![CDATA[<ul>
<li>空行： ^[\s]*\n</li>
<li>偶数行：\n(.*)\n</li>
</ul>


<hr />

<p>&lsquo;CMD+SHIFT+W&rsquo;  close all without close the window</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL add UNIQUE INDEX]]></title>
    <link href="http://1vn.wang/blog/2014/09/02/mysql-add-unique-index/"/>
    <updated>2014-09-02T21:43:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/09/02/mysql-add-unique-index</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE table ENGINE MyISAM;
</span><span class='line'>
</span><span class='line'>ALTER IGNORE TABLE table ADD UNIQUE INDEX(uid,name);
</span><span class='line'>
</span><span class='line'>ALTER TABLE table ENGINE InnoDB;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android R.plurals.name]]></title>
    <link href="http://1vn.wang/blog/2014/08/23/android-r-dot-plurals-dot-name/"/>
    <updated>2014-08-23T11:06:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/08/23/android-r-dot-plurals-dot-name</id>
    <content type="html"><![CDATA[<h3>Quantity Strings (Plurals)</h3>

<p>getQuantityString(int id, int quantity)
getQuantityString(int id, int quantity, Object&hellip; formatArgs)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plurals name="search_results"&gt;
</span><span class='line'>    &lt;item quantity="one"&gt;%1$d result for \"%2$s\"&lt;/item&gt;
</span><span class='line'>    &lt;item quantity="other"&gt;%1$d results for \"%2$s\"&lt;/item&gt;
</span><span class='line'>&lt;/plurals&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//第一个参数 count 用于选择 xml 中选择那个 item
</span><span class='line'>//第二个参数用于插入占位符
</span><span class='line'>// 
</span><span class='line'>String resultHint = getResources().getQuantityString(R.plurals.search_results,                    count,new Object[] { count, query });
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn English (5)]]></title>
    <link href="http://1vn.wang/blog/2014/08/22/learn-english-5/"/>
    <updated>2014-08-22T10:08:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/08/22/learn-english-5</id>
    <content type="html"><![CDATA[<p><img src="http://1vn.wang/images/2014/08/co-sleeping-family-bed-leigh-pennebaker-baby.jpg" title="baby" alt="baby" /><br/></p>

<h3>睡觉起床</h3>

<ul>
<li>I’m going to bed for the night. Goodnight!
我要上床睡觉去了，晚安</li>
<li>Goodnight.
晚安。
-Goodnight, I’m going to sleep.
晚安，我要去睡觉了。</li>
<li>Sweet dreams.
做个好梦</li>
<li>I think I’ll take a nap.
我觉得我要睡一会儿。</li>
<li>I really need to relax and take a nap.
我真的需要休息睡一会儿。</li>
<li>Alright, I’ll wake you up in about an hour.
好的，一小时后我叫醒你。</li>
<li>I’m going to go crash in my room.
我要去我房间好好睡一觉。</li>
<li>Sleep well. You have a lot to do in the morning.
睡个好觉，你早上还有很多事要做呢。</li>
<li>You really need a good rest.
你确实需要好好休息了。</li>
<li>How early should I set my alarm?
我该把闹钟定多早呢？</li>
<li>Try to wake up by 8 am.
尽量早上 8 点醒来吧。</li>
<li>Should I set my alarm early?
我该把闹钟定早点吗？</li>
<li>Don’t set it any later than 9.
不能定得晚于 9 点。</li>
<li>Did you sleep well?
你睡得还好吗？</li>
<li>Yes, I slept very well.
嗯，我睡得挺好的。</li>
<li>No, I couldn’t fall asleep.
不好，我几乎没睡着。</li>
<li>Did you go to bed late last night?
昨晚你熬夜了？</li>
<li>Yes, this jetlag is going to kill me!
是啊，这时差综合症简直要我的命。</li>
<li>Are you awake?
你醒了吗？</li>
<li>Yeah, but I don’t wanna get up.
是啊，但我真不想起床。</li>
<li>You were snoring last night.
昨晚上你打呼噜了。</li>
<li>Did I keep you up?
我打扰你睡觉了吗？</li>
<li>Oh, really? I didn’t hear it.
哦，是吗？我没听到。</li>
</ul>


<h3>Notes:</h3>

<ul>
<li><p>晚安：</p></li>
<li><p>good night</p></li>
<li><p>sleep tight</p></li>
<li><p>nighty night</p></li>
<li><p>sweet dreams</p></li>
<li><p>sleep well</p></li>
<li><p>have a nice nap(小睡，午安)</p></li>
<li><p>Buenos noches mi amor 晚安吾爱（西班牙语）</p></li>
</ul>


<p>Like father, like son  有其父必有其子</p>

<p>plastic surgery  整形手术</p>

<p>judge book by its cover  以貌取人</p>

<p>bail on someone 放某人鸽子</p>

<p>to bail on somebody 背弃</p>

<p>to bail on sb 背弃</p>

<p>floor it  踩油门吧 全速前进</p>

<p>butt out / leave me alone  别管闲事</p>

<p>you gotta just relax and butt out!</p>

<p>another day another dollar/same old same old</p>

<p>what’s the hurry?</p>

<p>what’s new?    nothing much.</p>

<p>playing possum  装傻</p>

<p>take a rain check</p>

<p>let’s take a rain check  改天再约吧</p>

<p>dude,straight up  哥们，老实说。</p>

<p>oh, that stings. 太伤人了</p>

<p>that really stung me.</p>

<p>still calm and collected</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android.intent.action.ASSIST]]></title>
    <link href="http://1vn.wang/blog/2014/08/21/android-dot-intent-dot-action-dot-assist/"/>
    <updated>2014-08-21T17:28:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/08/21/android-dot-intent-dot-action-dot-assist</id>
    <content type="html"><![CDATA[<h3>public static final String ACTION_ASSIST</h3>

<h4>Added in API level 16</h4>

<p>Activity Action: Perform assist action.</p>

<p>Input: EXTRA_ASSIST_PACKAGE, EXTRA_ASSIST_CONTEXT, can provide additional optional contextual information about where the user was when they requested the assist. Output: nothing.</p>

<p>Constant Value: &ldquo;android.intent.action.ASSIST&rdquo;</p>

<h3>Register:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.ASSIST&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/category&gt;</span>
</span><span class='line'><span class="nt">&lt;/intent-filter&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RemoteViews.apply]]></title>
    <link href="http://1vn.wang/blog/2014/08/18/remoteviews-dot-apply/"/>
    <updated>2014-08-18T21:17:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/08/18/remoteviews-dot-apply</id>
    <content type="html"><![CDATA[<h3>RemoteViews.apply</h3>

<p>View  apply(Context context, ViewGroup parent)</p>

<p>Inflates the view hierarchy represented by this object and applies all of the actions.</p>

<h3>USAGE:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="p">...</span><span class="na">bla</span> <span class="n">bla</span> <span class="n">bla</span>
</span><span class='line'>
</span><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="n">sbn</span><span class="p">.</span><span class="na">getNotification</span><span class="p">();</span>
</span><span class='line'><span class="n">RemoteViews</span> <span class="n">remoteViews</span> <span class="o">=</span> <span class="n">notification</span><span class="p">.</span><span class="na">contentView</span><span class="p">;</span>
</span><span class='line'><span class="n">View</span> <span class="n">notiView</span> <span class="o">=</span> <span class="n">previewRemote</span><span class="p">.</span><span class="na">apply</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span><span class="na">blablabla</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android UI Thread &amp; work Thread]]></title>
    <link href="http://1vn.wang/blog/2014/07/25/android-ui-thread-and-work-thread/"/>
    <updated>2014-07-25T10:37:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/07/25/android-ui-thread-and-work-thread</id>
    <content type="html"><![CDATA[<p>Using <code>wait()</code> and <code>notifyAll()</code> to make UI thread and work thread work one by one</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="p">(</span><span class="n">lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//on some condition, update UI on UI thread with handler</span>
</span><span class='line'>                  <span class="n">handler</span><span class="p">.</span><span class="na">post</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                      <span class="kd">synchronized</span> <span class="p">(</span><span class="n">lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Log</span><span class="p">.</span><span class="na">i</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">&quot;ui&quot;</span> <span class="o">+</span> <span class="n">index</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">lock</span><span class="p">.</span><span class="na">notifyAll</span><span class="p">();</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                  <span class="p">});</span>
</span><span class='line'>                  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">lock</span><span class="p">.</span><span class="na">wait</span><span class="p">();</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">Log</span><span class="p">.</span><span class="na">i</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">&quot;work&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}).</span><span class="na">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]Java(Android) 线程池]]></title>
    <link href="http://1vn.wang/blog/2014/07/17/zhuan-java-android-threadpool/"/>
    <updated>2014-07-17T11:05:00+08:00</updated>
    <id>http://1vn.wang/blog/2014/07/17/zhuan-java-android-threadpool</id>
    <content type="html"><![CDATA[<p>转自:<a href="http://www.trinea.cn/android/java-android-thread-pool/">http://www.trinea.cn/android/java-android-thread-pool/</a></p>

<p>介绍 new Thread 的弊端及 Java 四种线程池的使用，对 Android 同样适用。本文是基础篇，后面会分享下线程池一些高级功能。</p>

<h3>1、new Thread 的弊端</h3>

<p>执行一个异步任务你还只是如下 new Thread 吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}).</span><span class="na">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>那你就 out 太多了，new Thread 的弊端如下：</p>

<ol>
<li>每次 new Thread 新建对象性能差。</li>
<li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或 oom。</li>
<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>
</ol>


<p>相比 new Thread，Java 提供的四种线程池的好处在于：</p>

<ol>
<li>重用存在的线程，减少对象创建、消亡的开销，性能佳。</li>
<li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</li>
<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>
</ol>


<h3>2、Java 线程池</h3>

<p>Java 通过 Executors 提供四种线程池，分别为：
- newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>

<ul>
<li><p>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p></li>
<li><p>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</p></li>
<li><p>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p></li>
</ul>


<h4>(1). newCachedThreadPool</h4>

<p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">ExecutorService</span> <span class="n">cachedThreadPool</span> <span class="o">=</span> <span class="n">Executors</span><span class="p">.</span><span class="na">newCachedThreadPool</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="p">.</span><span class="na">sleep</span><span class="p">(</span><span class="n">index</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cachedThreadPool</span><span class="p">.</span><span class="na">execute</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p>

<h4>(2). newFixedThreadPool</h4>

<p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">ExecutorService</span> <span class="n">fixedThreadPool</span> <span class="o">=</span> <span class="n">Executors</span><span class="p">.</span><span class="na">newFixedThreadPool</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fixedThreadPool</span><span class="p">.</span><span class="na">execute</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Thread</span><span class="p">.</span><span class="na">sleep</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>                <span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为线程池大小为 3，每个任务输出 index 后 sleep 2 秒，所以每两秒打印 3 个数字。
定长线程池的大小最好根据系统资源进行设置。如 Runtime.getRuntime().availableProcessors()。可参考 PreloadDataCache。</p>

<h4>(3) newScheduledThreadPool</h4>

<p>创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">ScheduledExecutorService</span> <span class="n">scheduledThreadPool</span> <span class="o">=</span> <span class="n">Executors</span><span class="p">.</span><span class="na">newScheduledThreadPool</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduledThreadPool</span><span class="p">.</span><span class="na">schedule</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;delay 3 seconds&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="n">TimeUnit</span><span class="p">.</span><span class="na">SECONDS</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示延迟 3 秒执行。</p>

<p>定期执行示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">scheduledThreadPool</span><span class="p">.</span><span class="na">scheduleAtFixedRate</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;delay 1 seconds, and excute every 3 seconds&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">TimeUnit</span><span class="p">.</span><span class="na">SECONDS</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示延迟 1 秒后每 3 秒执行一次。
ScheduledExecutorService 比 Timer 更安全，功能更强大，后面会有一篇单独进行对比。</p>

<h4>(4)、newSingleThreadExecutor</h4>

<p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">ExecutorService</span> <span class="n">singleThreadExecutor</span> <span class="o">=</span> <span class="n">Executors</span><span class="p">.</span><span class="na">newSingleThreadExecutor</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">singleThreadExecutor</span><span class="p">.</span><span class="na">execute</span><span class="p">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Thread</span><span class="p">.</span><span class="na">sleep</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>                <span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果依次输出，相当于顺序执行各个任务。
现行大多数 GUI 程序都是单线程的。Android 中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能 IO 阻塞性及影响 UI 线程响应的操作。</p>
]]></content>
  </entry>
  
</feed>
